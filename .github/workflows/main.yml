name: "Orquestra√ß√£o Terraform"

on:
  push:
    branches:
      - main  # Executa quando h√° um push na branch main
  workflow_dispatch:  # Permite rodar manualmente via GitHub Actions

jobs:
  terraform-plan:
    name: "Executar Terraform Plan"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Install AWS CLI
        run: pip install awscli

      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Validar credenciais AWS
        run: aws sts get-caller-identity

      - name: Remove existing Terraform installation
        run: |
          if [ -d "/usr/local/bin/terraform" ]; then
            echo "Terraform is a directory. Removing..."
            sudo rm -rf /usr/local/bin/terraform
          elif [ -f "/usr/local/bin/terraform" ]; then
            echo "Terraform is a file. Removing..."
            sudo rm -f /usr/local/bin/terraform
          fi

      - name: Install Terraform and Terragrunt
        run: |
          wget -q https://releases.hashicorp.com/terraform/1.10.5/terraform_1.10.5_linux_amd64.zip
          unzip -o terraform_1.10.5_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform --version
          wget https://github.com/gruntwork-io/terragrunt/releases/latest/download/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt --version

      - name: Inicializar Terraform/Terragrunt
        working-directory: terraform
        run: terragrunt init

      - name: Executar Terraform Plan
        working-directory: terraform
        run: terragrunt plan -out=tfplan

      - name: Trigger Approval Workflow
        uses: actions/github-script@v6
        with:
          script: |
            const { context, getOctokit } = require('@actions/github');
            const octokit = getOctokit(process.env.GITHUB_TOKEN);
            await octokit.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main.yml',
              ref: context.ref,
              inputs: {
                approve: 'pending'
              }
            });

  approval:
    needs: terraform-plan
    runs-on: ubuntu-latest

    steps:
      - name: Aguardando Aprova√ß√£o
        run: echo "Aguardando aprova√ß√£o manual no GitHub Actions..."

      - name: Verificar Decis√£o
        id: check_approval
        run: |
          if [[ "${{ github.event.inputs.approve }}" == "yes" ]]; then
            echo "Aprova√ß√£o concedida. Continuando com o Terraform Apply."
            echo "::set-output name=approve::yes"
          else
            echo "Aprova√ß√£o negada. O processo ser√° interrompido."
            echo "::set-output name=approve::no"
            exit 1

  terraform-apply:
    needs: approval
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Verificar aprova√ß√£o para Apply
        if: ${{ needs.approval.outputs.approve }} == 'yes'
        working-directory: terraform
        run: |
          echo "üöÄ Terraform Plan gerado com sucesso!"
          echo "‚úÖ Aprova√ß√£o recebida. Continuando com Terraform Apply..."
          terragrunt apply -auto-approve

      - name: Cancelar Apply se n√£o aprovado
        if: ${{ needs.approval.outputs.approve }} == 'no'
        run: |
          echo "‚ùå Deploy cancelado pelo usu√°rio."
          exit 1
